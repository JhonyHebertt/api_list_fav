version: '3.8' # Especifique a versão do Docker Compose

services:
  # Serviço da sua aplicação Flask
  api:
    build: . # Constrói a imagem a partir do Dockerfile no diretório atual
    container_name: api_list_fav_app
    ports:
      - "5000:5000" # Mapeia a porta 5000 do host para a porta 5000 do container
    volumes:
      # Monta o diretório atual no container para live reload durante o desenvolvimento (opcional)
      # Para produção, você geralmente não monta o código fonte assim.
      - .:/app
    environment:
      - FLASK_ENV=development # Ou production
      - DATABASE_URL=postgresql://${FLASK_APP_DB_USER}:${FLASK_APP_DB_PASSWORD}@${FLASK_APP_DB_HOST}:5432/${FLASK_APP_DB_NAME}      
      # - FLASK_APP_DB_HOST=${FLASK_APP_DB_HOST}
      # - FLASK_APP_DB_USER=${FLASK_APP_DB_USER}
      # - FLASK_APP_DB_PASSWORD=${FLASK_APP_DB_PASSWORD}
      # - FLASK_APP_DB_NAME=${FLASK_APP_DB_NAME}
      # - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      db: # Garante que o serviço 'db' inicie antes do serviço 'api'
        condition: service_healthy

  # Serviço do banco de dados PostgreSQL
  db:
    image: postgres:13-alpine # Use uma imagem oficial do PostgreSQL
    container_name: postgres_db
    ports:
      - "5432:5432" # Mapeia a porta 5432 do host para a porta 5432 do container (cuidado em produção)
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Persiste os dados do PostgreSQL mesmo se o container for removido
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data: # Define um volume nomeado para persistência dos dados do banco